GRID SHIFT ALGORITHM

The ruby class found in this project operates on a grid with an n x n dimension.

For a given grid...

Example Grid:

    {'A' => [1, 1], 'B' => [1, 2], 'C' => [1, 3], 'D' => [1, 4],
     'E' => [2, 1], 'F' => [2, 2], 'G' => [2, 3], 'H' => [2, 4],
     'I' => [3, 1], 'J' => [3, 2], 'K' => [3, 3], 'L' => [3, 4],
     'M' => [4, 1], 'N' => [4, 2], 'O' => [4, 3], 'P' => [4, 4]}

The characters in each position should be shifted clockwise.. relative to their position.

Given the above grid, items would move as follows:

    A -> B -> C -> D
    ^              |
    |              v
    E    J -> F    H
    ^    ^    |    |
    |    |    v    v
    I    K <- G    L
    ^              |
    |              v
    M <- N <- O <- P


As such, the expected output would be:

    {'E' => [1, 1], 'A' => [1, 2], 'B' => [1, 3], 'C' => [1, 4],
     'I' => [2, 1], 'J' => [2, 2], 'F' => [2, 3], 'D' => [2, 4],
     'M' => [3, 1], 'K' => [3, 2], 'G' => [3, 3], 'H' => [3, 4],
     'N' => [4, 1], 'O' => [4, 2], 'P' => [4, 3], 'L' => [4, 4]}


My solution is n^2 in complexity... The collection size is n^2 and the algorithm loops through this once to divide the collection into tracks and again through each track to shift the items within.




